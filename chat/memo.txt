python で api 作るなら、flaskか fast apiといったところかな。  他ある？

AWSの API-gateway、 lambda、python でバックエンドを構築しようと思います。
その場合、FastAPIはいる？

awsのcloudfront + s3でフロントエンドを構築したい。 reactのコードをデプロイできる？

apigateway + lambdaでバックエンド作成したいけど、
lambadaのpython処理で RAGのベクトルＤＢ FAISSを扱いたい場合、FAISSファイルはどこにおいたらいいの？


AWS cognitoで認証するときに、ユーザ側のブラウザにcookieか何かに
アクセスキーかパスワード的なものを持たせて、
２回目からはパスワード入力不要にするとかできる？
パスキー？


AI API接続は api_utils.py の create_client_AzureOpenAI() を用いて、以下のように行うこと。
client = create_client_AzureOpenAI(filepath)

AIとCLIでチャットできるコードを作成して。


任意の３つの数字を受け取り、それらの和と積をリターンするAPIを作って。

CORS設定をして。
"http://localhost:3000"からはすべて許可。

python FASTAPI起動
C:\pyenv\py312temp\Scripts\python.exe -m uvicorn api:app --reload
C:\pyenv\py311fast\Scripts\python.exe -m uvicorn api:app --reload

Swagger UI
http://127.0.0.1:8000/docs

API仕様の出力
curl http://localhost:8000/openapi.json > openapi.json


APIのURL
"http://localhost:8000/calculate"

APIの仕様
./openapi.json


フロントエンドを作成して。
  - Reactプロジェクトのセットアップをお願いします。
  - ３つの数値を入力する欄を設ける
  - 足し算ボタンを表示する（計算は別途、APIで行う予定なので今は実装しない）
  - 掛け算ボタンを表示する（計算は別途、APIで行う予定なので今は実装しない）
  - 計算結果を表示するエリアを設ける

https://qiita.com/mon_pg/items/5816a72bd88ef49d6a69
Create React App と vite の二種類のツールがある。

npx create-react-app my-app
cd my-app
npm install             # package.json にて指定されたパッケージをインストール。node_modulesフォルダを作成する。
npm install -g serve    # -gでグローバルインストール
npm start               # 開発中のsrcフォルダを実行
npm run build           # 本番用のbuildフォルダ作成 
serve build             # 本番用のbuildフォルダを実行

npm create vite@latest my-app -- --template react-ts
cd my-app
npm install
npm run dev
npm run build
npm run preview

npm run build の後、できた buildフォルダをiisにセットするだけではNGで、
さらに npm start が必要？ npm startはどこでやるの？ iis上？

掛け算ボタンがクリックされた場合、数値１，数値２，数値３を以下のAPIへリクエストし、
そのレスポンスを計算結果欄に表示して、

APIのURL
"http://localhost:8000/calculate"

APIの仕様は以下を参照して。
./openapi.json

--------------------------------------------------------------------
以下のAPIを追加してください。

# リクエスト
  - ファイルパス
  
# 処理
  - 受け取ったファイルパスのExcelを開き、
    左端のシートのB5セルの値を取得。

# レスポンス 
  - 取得した値


"C:/Users/arwml/Documents/Book1.xlsx"
"C:\Users\arwml\Documents\Book1.xlsx"

--------------------------------------------------------------------
機能追加をお願いします。 

# 画面レイアウト変更
  - Excelパス入力欄を追加。
  - Excelデータ表示ボタンを追加。
  - Excelデータ表示欄を追加

# Excelデータ表示ボタンクリック 

  - APIを実行する。 http://localhost:8000/read_excel_cell
  - リクエスト：入力されたExcelパス。
     -  ただし、"\"はエラーとなるため、"/"に変換した後に送付する。
     -  例  "C:\temp\aaa.xlsx"  →  "C:/temp/aaa.xlsx"
  - レスポンス：文字列
  - 得た文字列をExcelデータ表示欄へ表示する。

# APIの詳細仕様
  - 以下のコマンドを実行してください。
    curl http://localhost:8000/openapi.json > openapi.json
  - 得られたopenapi.jsonを確認すること。

--------------------------------------------------------------------

機能追加をお願いします。 

Excelパス入力欄は、ダイアログボックスで、ファイルを選択できるようにしたい。 

--------------------------------------------------------------------
以下のAPIを追加してください。

# リクエスト
  -  ファイルパス : 文字列
  -  値           ：文字列
  
# 処理
  - 受け取ったファイルパスのExcelを開き、
    左端のシートのB6セルに受け取った値をセット。 

# レスポンス 
  - 処理OKの場合、"OK" 

http://localhost:82/
--------------------------------------------------------------------
機能追加をお願いします。 

・ファイル選択ボタンを追加。
・ファイル選択ボタンをクリックで、ダイアログが開く。
・ユーザは複数のファイルを選択しOKボタンを押す。
・複数のファイル名を取得し、取得したファイル名を画面に表示する。

--------------------------------------------------------------------
タブで画面を切り替えたい。
・今の画面は、「計算アプリ」タブとします。
・「ベクトル化」タブを追加して。タブ画面の中身はこれから実装するので、とりあえず、「TEST!!」とだけ表示して。

--------------------------------------------------------------------
#「ベクトル化」タブのレイアウト変更
   - フォルダ入力欄を追加。 例えば、「C:\Temp\text」のような入力される予定。 
   - 「処理実行」ボタンを追加。現時点ではまだ処理は実装しない。
   - 「処理結果」エリアを追加。処理結果が表示される予定。  

--------------------------------------------------------------------
「チャット」タブを追加。
	- 「対象文書選択」エリア
		画面左 1/3 くらいに、「対象文書選択」エリアを設ける。
		ここは別途、APIで対象文書リストを入手しその内容を表示する予定。
		ユーザはラジオボタンで選択することを想定している。
	-「チャット」エリア
		画面右 2/3で、「チャット」エリアを設ける。
		ここは、ユーザ問い合わせ入力欄があり、ユーザはそこからＡＩに質問する。
		ＡＩからの回答が表示される欄を設ける。
	- 全体的に使いやすく、モダンなレイアウトにして。
	- 現時点では処理は実装しない。

--------------------------------------------------------------------
#「ベクトル化」タブのレイアウト変更

フォルダ入力欄と処理実行ボタンの間に、表示名入力欄を追加して。
そこには、例えば、「○○システム関連文書」 などが入力される予定。

--------------------------------------------------------------------
以下のAPIを追加してください。

# リクエスト
  -  対象フォルダパス     : 文字列
  -  保存先フォルダパス   ：文字列
  
# 処理
  - 対象フォルダパス内のファイルを探索し、
    それらをFAISSでベクトル化する。 
  - 処理中のファイル名と全体進捗をターミナルへ表示する。
  - FAISSは保存先フォルダパスへ保存する。

# 流用元コード
  - 処理の詳細は ./1_ベクトルDB作成.py  を先ずは確認し参考にすること。

# レスポンス 
  - 処理したファイル件数を返す。

--------------------------------------------------------------------

C:/Temp/doc
C:/Temp/faiss1

処理状況を
	print(f"処理中 {count}/{total_files} : {file_path}")
で表示しているけど、APIリクエスト元の方でも状況把握したいので、
ストリーミングでAPIリクエスト元にも状況を渡したい。

C:\pyenv\py312temp\Scripts\python.exe -m uvicorn api:app --reload --log-level info
C:\pyenv\py312temp\Scripts\python.exe -m uvicorn api:app --log-level info
--------------------------------------------------------------------
機能追加をお願いします。 

# 対象機能
  - ベクトル化タブの処理実行ボタンクリック

# 処理内容
  - APIを実行する。 http://localhost:8000/vectorize
  - リクエスト：
       - "target_folder_path"は フォルダ入力欄の文字列をセットする
       - "save_folder_path" は固定で "C:/Temp/faiss1"をセットする
       - 画面の 表示名入力欄の文字列は現時点では使用しない。

  - レスポンス：処理結果欄へ表示する。 APIはストリーミングに対応しているので、ストリーミングで表示する。

# APIの詳細仕様
  - まずは以下のコマンドを実行してください。
    curl http://localhost:8000/openapi.json > openapi.json
  - 得られたopenapi.jsonを確認すること。

--------------------------------------------------------------------
以下のAPIを追加してください。

# リクエスト
  -  ユーザ質問文        : 文字列
  -  FAISSフォルダパス   ：文字列
  
# 処理
  - FAISSフォルダパスの index.faiss にFAISSインデックスが作成されている。
    これとユーザ質問文を使ってRAGチャットを行う。

  -AI接続情報はすでに実装されているのでこれを使う。
    - client, model = create_client_AzureOpenAI(API_CONFIG_PATH)
    - embeddings = create_client_AzureOpenAIEmbeddings(API_EMB_CONFIG_PATH)

# 流用元コード
  - 処理の詳細は ./1_ベクトルDB作成.py  を先ずは確認し参考にすること。

# レスポンス 
  - AI回答文をストリーミングで返していく。

--------------------------------------------------------------------

アルプス山脈で開催されたオリンピックは？
C:/Temp/faiss1


--------------------------------------------------------------------
以下のAPIを追加してください。
すでに、 @app.post("/rag_chat") は存在するが、ストリーミングがうまくできていない可能性があるので、
一旦ストリーミングなしの /rag_chat_temp  を追加して。  

# リクエスト
  -  ユーザ質問文        : 文字列
  -  FAISSフォルダパス   ：文字列
  
# 処理
  - FAISSフォルダパスの index.faiss にFAISSインデックスが作成されている。
    これとユーザ質問文を使ってRAGチャットを行う。

  -AI接続情報はすでに実装されているのでこれを使う。
    - client, model = create_client_AzureOpenAI(API_CONFIG_PATH)
    - embeddings = create_client_AzureOpenAIEmbeddings(API_EMB_CONFIG_PATH)

# 流用元コード
  - 処理の詳細は ./1_ベクトルDB作成.py  を先ずは確認し参考にすること。

# レスポンス 
  - AI回答文をストリーミングではなく、一括で返す。 

--------------------------------------------------------------------
--------------------------------------------------------------------
機能追加をお願いします。 

# 対象機能
  - チャットタブの送信ボタンクリック

# 処理内容
  - APIを実行する。 http://localhost:8000/rag_chat_stream
  - リクエスト：
       - "user_question"は ユーザ質問内容をセットする
       - "faiss_folder_path" は固定で "C:/Temp/faiss1"をセットする

  - レスポンス：「ここにAIの回答が表示されます。」の箇所へ表示する。 APIはストリーミングに対応しているので、ストリーミングで表示する。

# APIの詳細仕様
  - まずは以下のコマンドを実行してください。
    curl http://localhost:8000/openapi.json > openapi.json
  - 得られたopenapi.jsonを確認すること。

--------------------------------------------------------------------
機能追加をお願いします。 

# レイアウト変更
  - チャットタブの送信ボタンの横に、「ストリーム」ボタンを追加

# 「ストリーム」ボタンをクリック時の処理
  - APIを実行する。 http://localhost:8000/rag_chat_stream
  - リクエスト：
       - "user_question"は ユーザ質問内容をセットする
       - "faiss_folder_path" は固定で "C:/Temp/faiss1"をセットする

  - レスポンス：「ここにAIの回答が表示されます。」の箇所へ表示する。 APIはストリーミングに対応しているので、ストリーミングで表示する。

# APIの詳細仕様
  - まずは以下のコマンドを実行してください。
    curl http://localhost:8000/openapi.json > openapi.json
  - 得られたopenapi.jsonを確認すること。

--------------------------------------------------------------------
@app.post("/rag_chat") は AIからの一括回答ですが、ストリーミングで回答した/rag_chat2を作成したい。
つまり、AIからの回答をストリーミングで受けて、
さらに、リクエスト元へストリーミングでレスポンスするという２段階ストリーミング
にする必要がある。  
--------------------------------------------------------------------
機能追加をお願いします。 

# レイアウト変更
  - チャットタブの送信ボタンの横に、「chat2」ボタンを追加

# 「ストリーム」ボタンをクリック時の処理
  - APIを実行する。 http://localhost:8000/rag_chat2
  - リクエスト：
       - "user_question"は ユーザ質問内容をセットする
       - "faiss_folder_path" は固定で "C:/Temp/faiss1"をセットする

  - レスポンス：「ここにAIの回答が表示されます。」の箇所へ表示する。 APIはストリーミングに対応しているので、ストリーミングで表示する。

--------------------------------------------------------------------
チャットタブには送信、chat2、ストリームのボタンがならんでいますが、
chat2だけを残して。 他のは削除して。
--------------------------------------------------------------------
@app.post("/rag_chat2") はストリームでAI回答をレスポンスしますが、
AI回答が終わった後に、
sources = [{"source": doc.metadata.get('source', '不明')} for doc in docs]
を取得して、 sources  も返してほしい。
--------------------------------------------------------------------
ベクトル化タブについて改修して。

http://localhost:8000/vectorize  へのリクエスト内容が変わっています。
save_folder_path が save_folder_naiyo に変わりました。
リクエスト時には、 save_folder_naiyo に、表示名入力欄で入力した文字列をセットして。
--------------------------------------------------------------------
以下のAPIを追加してください。

# リクエスト
  -  引数のデータはありません。
  
# 処理
  - "C:/vector_db" を参照し、その直下に存在するフォルダ名を一覧で取得。
例：
20250914_152504
20250914_153248

  - "C:/vector_db" 直下にある、vector_db.tsv の内容を確認。
例：
フォルダパス	内容
20250914_150230	テスト１
20250914_151610	C:/Temp/faiss1
20250914_151650	C:/Temp/faiss1
20250914_152504	てすと３
20250914_153248	あいう６７

  - その直下に存在するフォルダ名に紐づく、内容を取得する。

この例の場合では、以下のようになる。これをJSONで返す。 
フォルダパス	内容
20250914_152504	てすと３
20250914_153248	あいう６７

--------------------------------------------------------------------
改修をお願いします。 

# チャットタブ画面を開いたタイミング
  - GET APIを実行する。 http://localhost:8000/get_vector_db_list
  - 以下のようなJSONが返ってきます。 
{
  "folders": [
    {
      "folder_path": "20250914_152504",
      "content": "てすと３"
    },
    {
      "folder_path": "20250914_153248",
      "content": "あいう６７"
    }
  ]
}

  -  対象フォルダ選択エリアに現在は
     - フォルダ1
     - フォルダ2
     - フォルダ3
     が表示されていますが、得られたJSONの"content"を表示してください。
     
     上記のJSONですと、以下のように表示しラジオボタンで選択できるようにします。 
     - てすと３
     - あいう６７
     
さきほど、改修したのですが、うまく動いていないようで、
  -  対象フォルダ選択エリアに
     - フォルダ1
     - フォルダ2
     - フォルダ3
  のまま表示されるので、よく調べてください。


ーーーーーーーーーーーーーーーーーーーーーーーーーー
チャットタブ画面を開いたときに、
対象フォルダが表示されますが、folder_path の降順で表示するようにして。

'http://localhost:8000/rag_chat2'に対してリクエストするときに
faiss_folder_path: 'C:/Temp/faiss1',とセットしているが、そこを改修したい。
画面左の対象フォルダ選択で選択している行の folder_path を用いて、

"C:/vector_db/" + folder_path  のように結合する。
得られたフォルダパス文字列を faiss_folder_path にセットしてリクエストして。



C:\Temp\doc

チャットタブ画面の対象フォルダ選択エリアの下の方に、削除ボタンを追加して。

ーーーーーーーーーーーーーーーーーーーーーーーー
POST APIを作成して。

# URLは以下を追加。
   http://localhost:8000/delete_folder

# リクエスト
	リクエストは以下を受け取る。
	folder_path ： 文字列
	例："20250941_234134"

# 処理
	受け取った folder_path を用いて、削除対象フォルダパスを作成する。
	削除対象フォルダパス = "C:/vector_db/" + folder_path 

	削除対象フォルダパス のフォルダを削除する。
	
	削除OKであれば、"OK"を返す


pyinstaller --noconsole  run_server.py
api jsonファイルはEXEから参照できる位置に置いておく。
